<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transmisión en Vivo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
        }

        .login-container, .stream-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
        }

        .stream-container {
            display: none;
        }

        input {
            padding: 10px;
            margin: 5px 0;
            width: 300px;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        button {
            padding: 10px;
            width: 320px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px 0;
        }

        button:hover {
            background-color: #45a049;
        }

        video {
            width: 80%;
            max-width: 600px;
            margin: 10px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>

<!-- Login -->
<div class="login-container" id="login-container">
    <h2>Iniciar Sesión</h2>
    <input type="email" id="email" placeholder="Correo electrónico">
    <input type="password" id="password" placeholder="Contraseña">
    <button onclick="login()">Ingresar</button>
    <p id="login-error" style="color: red;"></p>
</div>

<!-- Pantalla de Transmisión -->
<div class="stream-container" id="admin-container">
    <h2>Transmisión en Vivo (Administrador)</h2>
    <video id="localVideo" autoplay muted></video>
    <button onclick="startStreaming()">Iniciar Transmisión</button>
</div>

<div class="stream-container" id="viewer-container">
    <h2>Ver Transmisión en Vivo</h2>
    <video id="remoteVideo" autoplay></video>
</div>

<script>
    // Credenciales permitidas
    const adminCredentials = { email: 'v@gmail.com', password: '12' };
    const viewerCredentials = { email: 'x@gmail.com', password: '12' };

    // Variables WebRTC
    let localStream;
    let peerConnection;
    const config = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

    // Función de Login
    function login() {
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;

        if (email === adminCredentials.email && password === adminCredentials.password) {
            showAdminContainer();
        } else if (email === viewerCredentials.email && password === viewerCredentials.password) {
            showViewerContainer();
        } else {
            document.getElementById('login-error').innerText = 'Correo o contraseña incorrectos';
        }
    }

    // Mostrar interfaz del administrador
    function showAdminContainer() {
        document.getElementById('login-container').style.display = 'none';
        document.getElementById('admin-container').style.display = 'flex';
    }

    // Mostrar interfaz del espectador
    function showViewerContainer() {
        document.getElementById('login-container').style.display = 'none';
        document.getElementById('viewer-container').style.display = 'flex';
        startViewing();
    }

    // Iniciar transmisión desde la cámara del administrador
    async function startStreaming() {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            document.getElementById('localVideo').srcObject = localStream;

            peerConnection = new RTCPeerConnection(config);
            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

            peerConnection.onicecandidate = event => {
                if (event.candidate) {
                    sendSignal('new-ice-candidate', event.candidate);
                }
            };

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            sendSignal('offer', offer);
        } catch (error) {
            console.error('Error al iniciar la transmisión:', error);
        }
    }

    // Función para ver la transmisión en vivo
    async function startViewing() {
        peerConnection = new RTCPeerConnection(config);

        peerConnection.ontrack = event => {
            const remoteVideo = document.getElementById('remoteVideo');
            remoteVideo.srcObject = event.streams[0];
        };

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                sendSignal('new-ice-candidate', event.candidate);
            }
        };

        // Esperar una oferta del administrador
        receiveSignal('offer', async offer => {
            await peerConnection.setRemoteDescription(offer);
            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            sendSignal('answer', answer);
        });

        // Recibir ICE candidates del administrador
        receiveSignal('new-ice-candidate', async candidate => {
            try {
                await peerConnection.addIceCandidate(candidate);
            } catch (e) {
                console.error('Error al agregar ICE candidate:', e);
            }
        });
    }

    // Simulación de señales WebRTC (sólo para esta demo)
    let signals = {};
    function sendSignal(type, data) {
        signals[type] = data;
    }
    function receiveSignal(type, callback) {
        const interval = setInterval(() => {
            if (signals[type]) {
                callback(signals[type]);
                clearInterval(interval);
            }
        }, 1000);
    }
</script>

</body>
</html>
